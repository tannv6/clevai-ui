@import '../css/common.scss';
.progress {
  height: 12px;
  width: 100%;
  position: relative;
  .wrapper {
    background: $gray4Color;
    overflow: hidden;
    border-radius: 12px;
    width: 100%;
    height: 100%;
    .progress-completed {
      height: 100%;
      border-radius: 12px;
    }
    .dots {
      width: 100%;
      height: 100%;
      display: flex;
      .dot {
        height: 100%;
        border-radius: 2px;
        overflow: hidden;
        background-clip: content-box;
      }
      > :not(:first-child) {
        margin-left: 2px;
      }
    }
  }
  .number {
    position: absolute;
    left: 0;
    bottom: calc(100% + 10px);
    @include font-regular;
    font-size: 14px;
    line-height: 18px;
    padding: 7px 10px;
    background: #ffffff;
    box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    color: $gray85Color;
    width: 46px;
    box-sizing: border-box;
    display: flex;
    justify-content: center;
    align-items: center;
    &::before {
      content: '';
      position: inherit;
      bottom: -4px;
      left: 50%;
      transform: translateX(-50%);
      border-top: 4px solid $whiteColor;
      border-left: 4px solid transparent;
      border-right: 4px solid transparent;
    }
  }
}

$progressCircleSizes: 280, 240, 200, 160, 100, 64;

$mapThumbnailWidth: (
  280: 208,
  240: 176,
  200: 152,
  160: 120,
  100: 76,
  64: 48
);

$mapFont: (
  280: 208,
  240: 176,
  200: 152,
  160: 120,
  100: 76,
  64: 48
);

@mixin getFont($size) {
  @if $size==280 {
    @include font-h1-semibold;
  } @else if $size==240 {
    @include font-h1-medium;
  } @else if $size==200 {
    @include font-h2-medium;
  } @else if $size==160 {
    @include font-h3-medium;
  } @else if $size==100 {
    @include font-body-medium;
  } @else if $size==64 {
    @include font-caption-medium;
  }
}

.progress-circle {
  position: relative;
  @each $size in $progressCircleSizes {
    &.progress-circle-#{$size} {
      width: $size * 1px;
      height: $size * 1px;
      circle {
        stroke-width: $size / 10;
        cx: $size / 2;
        cy: $size / 2;
        r: $size / 2 - $size / 20;
      }
      .circle-thumbnail {
        @include getFont($size);
        width: map-get($map: $mapThumbnailWidth, $key: $size) * 1px;
        height: map-get($map: $mapThumbnailWidth, $key: $size) * 1px;
      }
      $strokeDashArray: 3.14159 * ($size - $size / 10);
      .circle1 {
        stroke-dasharray: $strokeDashArray;
        stroke-dashoffset: 0;
      }
      .circle2 {
        stroke-dasharray: $strokeDashArray;
        stroke-dashoffset: calc(#{$strokeDashArray} * (var(--val)));
      }
    }
    @media (min-width: $desktopWidthMin) {
      &.progress-circle-xl-#{$size} {
        width: $size * 1px;
        height: $size * 1px;
        circle {
          stroke-width: $size / 10;
          cx: $size / 2;
          cy: $size / 2;
          r: $size / 2 - $size / 20;
        }
        .circle-thumbnail {
          @include getFont($size);
          width: map-get($map: $mapThumbnailWidth, $key: $size) * 1px;
          height: map-get($map: $mapThumbnailWidth, $key: $size) * 1px;
        }
        $strokeDashArray: 3.14159 * ($size - $size / 10);
        .circle1 {
          stroke-dasharray: $strokeDashArray;
          stroke-dashoffset: 0;
        }
        .circle2 {
          stroke-dasharray: $strokeDashArray;
          stroke-dashoffset: calc(#{$strokeDashArray} * (var(--val)));
        }
      }
    }
    @media (min-width: $tabletWidthMin) and (max-width: $tabletWidthMax) {
      &.progress-circle-md-#{$size} {
        width: $size * 1px;
        height: $size * 1px;
        circle {
          stroke-width: $size / 10;
          cx: $size / 2;
          cy: $size / 2;
          r: $size / 2 - $size / 20;
        }
        .circle-thumbnail {
          @include getFont($size);
          width: map-get($map: $mapThumbnailWidth, $key: $size) * 1px;
          height: map-get($map: $mapThumbnailWidth, $key: $size) * 1px;
        }
        $strokeDashArray: 3.14159 * ($size - $size / 10);
        .circle1 {
          stroke-dasharray: $strokeDashArray;
          stroke-dashoffset: 0;
        }
        .circle2 {
          stroke-dasharray: $strokeDashArray;
          stroke-dashoffset: calc(#{$strokeDashArray} * (var(--val)));
        }
      }
    }
    @media (max-width: $mobileWidthMax) {
      &.progress-circle-sm-#{$size} {
        width: $size * 1px;
        height: $size * 1px;
        circle {
          stroke-width: $size / 10;
          cx: $size / 2;
          cy: $size / 2;
          r: $size / 2 - $size / 20;
        }
        .circle-thumbnail {
          @include getFont($size);
          width: map-get($map: $mapThumbnailWidth, $key: $size) * 1px;
          height: map-get($map: $mapThumbnailWidth, $key: $size) * 1px;
        }
        $strokeDashArray: 3.14159 * ($size - $size / 10);
        .circle1 {
          stroke-dasharray: $strokeDashArray;
          stroke-dashoffset: 0;
        }
        .circle2 {
          stroke-dasharray: $strokeDashArray;
          stroke-dashoffset: calc(#{$strokeDashArray} * (var(--val)));
        }
      }
    }
    .icon {
      transform: translateX(-50%)
        translateY(calc(-50% + #{$size / 10}px))
        rotate(var(--rotate));
    }
  }
  .svg-circle {
    width: inherit;
    height: inherit;
    circle {
      stroke-linecap: round;
      fill: none;
      transition: all 0.1s linear;
    }
  }
  .icon-wrap {
    position: absolute;
    z-index: 1;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    .icon {
      position: absolute;
      left: 50%;
      top: 0;
    }
  }
  .circle-thumbnail {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    border-radius: 50%;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1;
    .thumbnail-image {
      width: 64%;
    }
  }
}
